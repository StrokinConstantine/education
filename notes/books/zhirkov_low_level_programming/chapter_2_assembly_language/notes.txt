In Unix everyting is a file.
System calls <-> interface between user applications and the OS, enabling programs to request services from the OS.
Three files ( with FDs, 0, 1, 2 ) opened as soon as a program starts.
stderr ( FD = 2 ) is used to output information about the program execution process but not its results.
Global variables = data, available in every moment of the program execution.
Labels = readable names for addresses.
Callee-saved registers must be restored by the procedure being called. So, if it needs to change them, it has to change them back ( rbx, rbp, rsp, r12 - r15 ).
Caller-saved registers should be saved before invoking a function and restored after ( All other registers ).
rax stores return value, rdx can be used to store the second return value.
Constant precomputation <-> computation not in RT: mov rax, label + 1 + 2*3
String length just before the string VS null-terminated strings
Address = base + index * scale + displacement; scale = 1, 2, 4, 8; displacement is always immediate.
The $? variable.